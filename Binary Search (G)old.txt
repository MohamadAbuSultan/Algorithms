Binary Search (Half Interval search || Logarithmic Search يطلق عليه)
Binary Search => Divide and Conquer شغالة على مبدأ
Binary Search => Sorted Array لازم يكون (ascending || descending )
Low => (Index 0)
High => (Last Item)
Med => (integer ((Low + High) / 2) )

"The binary search algorithm divides the search range into two halves
 and identifies the median element as the next search point,
 comparing it to the desired value to determine the direction of the search."

 
Code From Adel Nasim
int BinarySearch(arr[],Low,High,Key)
{
	while(Low <= High){
		int Mid = (Low+High)/2;
		if(arr[Mid] == Key)
		{
			return Mid;
		}
		if(arr[Mid] > Key)
		{
			High = Mid - 1;
		}
		else{
			Low = Mid + 1;
		}
	}
	return -1;
}
int main()
{
    int arr[] = { 2, 3, 4, 10, 40 };
	int n = sizeof(arr) / sizeof(arr[0]);
	
	int num;
	cout << "Enter a Number : ";
	cin >> num;
	
	int result = BinarySearch(arr, 0, n-1, num);
	if(result == -1)
		cout << "The Number : (" << num << ") Was Not Found." << endl;
	else
		cout << "The Number : (" << arr[result] << ") Was Found At Index : (" << result << ")" << endl;
}



Grokking Algorithm كود من كتاب 
#include <iostream>
#include <string>
using namespace std;

int binary_search(int list[], int item)
{
    int low = 0;
    int high = sizeof(list) - 1;

    while (low <= high)
    {
        int mid = (low + high) / 2;
        int guess = list[mid];
        if (guess == item)
            return mid;
        if (guess > item)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return NULL;
}

int main()
{
    int my_list[5] = { 1, 3, 5, 7, 9 };
    cout << binary_search(my_list, 1);
    cout << endl;
    cout << binary_search(my_list, 3);
    cout << endl;
    cout << binary_search(my_list, 5);
    cout << endl;
    cout << binary_search(my_list, 7);
    cout << endl;
    cout << binary_search(my_list, 9); 

}