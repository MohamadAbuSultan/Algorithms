Complexity

ex:
	10   	5      15         25   55
BestCase	   	   AvgCase         WorstCase
Omega 		   	   Theta		   big-O Notation
Notation Ω     	   Notation Θ


Complexity:-
ex1: 
sum;
for(int i = 1; i<=n; i++) // n
	sum = sum + i;        // constant time (1)

Time Complexity : 1 + n => O(n)

if , else ا لعمليات إلي بتتم على متغير معين ، ضرب قسمة ضرب ، و
Constant Time بتاخذ 


ex2: 
int i;
i=0;
for(i = 0; i<n; i++)   // n
	print i; 
for(j = 0; j<n; j++)   // n    
for(k = 0; k<n; k++)   // n 
	print j+k;

Time Complexity : n + n * n => O(n²)


ex3: 
int i = 1;
for(i = 0; i<n; i=i*2)   // O(Log n) إذا كان ضرب أو قسمة بكون
	print i; 
	
Time Complexity : 1 + Log n => O(log n)


ex4: 
int i = j = 0; // 1
for(i = 0; i<n; i++) // n
for(j = n; j>0; j=j/3) // log_3 n  
	print i+j; 
	
Time Complexity : 1 + n + log3 n => O(n log_3 n)


ex5:
for(i = 0; i<n; i++) // n
for(j = 0; j<n; j++) // n  
for(k = 1; k<n; k=k*2) // log_2 n
	print i+j+k;

Time Complexity : n*n*log2 n =>O(n²log n)


ex6:
for(i = n/2; i<n; i++) // n/2
for(j = 1; j<n; j=j*2) // log_2 n 
for(k = 1; k<n; k=k*2) // log_2 n
	print i+j+k;

Time Complexity : n/2 * log_2 n * log_2 n => O(n log²_2 n)


while(n>2)
	n=n/2;
Time Complexity : O(Log n)


Loop: // n
Loop: // n
Loop: // n
Loop: // n
Time Complexity : n^4


int fib(int n){
	if(n < 2)
		return n;
	return fib(n - 1) + fib(n - 2);}
توضيح : نفرض n تساوي 4
2° = 1 ======= fib(4) =>
2^1 = 2 ====== fib(3) + fib(2) =>
2² = 4 ======= fib(2) + fib(1) + fib(1) + fib(0)
Time Complexity : 2° + 2^1 + 2² + .......... = 2^(n-1) = O(2)^n


int fun(int n){
	if(n < 1)
		return n;
	print n;
	return fun(n/2);}
O(log2 n)


for(int i = 0; i < n; i++) // n
	fun();
Time Complexity : بالبداية وبنحسب كم بتحسب بالأساس fun بنروح ل فنكشن 